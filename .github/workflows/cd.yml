name: CD - Î¶¥Î¶¨Ï¶à Î∞è Î∞∞Ìè¨

on:
  pull_request:
    branches: [main]
    types: [closed] # PRÏù¥ Î®∏ÏßÄÎê† ÎïåÎßå ÏûëÎèô

jobs:
  bump-version-and-release:
    if: github.event.pull_request.merged == true
    name: Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Î¶¥Î¶¨Ïä§ ÏÉùÏÑ±
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.split_and_bump.outputs.new_tag }}
    steps:
      - name: Ï†ÄÏû•ÏÜå Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4

      - name: ÏµúÏã† ÌÉúÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
        id: get_latest
        run: |
          git fetch --tags
          TAG=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$TAG" ]]; then
            TAG="v0.0.0"
          fi
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

      - name: Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨
        id: split_and_bump
        run: |
          VERSION=${{ env.LATEST_TAG }}
          VERSION="${VERSION#v}"
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          LABELS_JSON='${{ toJson(github.event.pull_request.labels) }}'
          LABEL_NAMES=$(echo "$LABELS_JSON" | jq -r '.[].name')

          VERSION_TYPE=""
          for label in $LABEL_NAMES; do
            if [[ "$label" == "major" ]]; then
              VERSION_TYPE="major"
            elif [[ "$label" == "minor" ]]; then
              VERSION_TYPE="minor"
            elif [[ "$label" == "patch" ]]; then
              VERSION_TYPE="patch"
            fi
          done

          if [[ -z "$VERSION_TYPE" ]]; then
            echo "‚ùå Ïú†Ìö®Ìïú Î≤ÑÏ†Ñ ÎùºÎ≤®Ïù¥ ÏóÜÏäµÎãàÎã§."
            exit 1
          fi

          case $VERSION_TYPE in
            major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
            patch) PATCH=$((PATCH + 1)) ;;
          esac

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Git ÌÉúÍ∑∏ ÏÉùÏÑ± Î∞è Ìë∏Ïãú
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

      - name: Î¶¥Î¶¨Ïä§ Ï†úÎ™©Ïö© PROJECT_NAME ÎåÄÎ¨∏Ïûê Î≥ÄÌôò
        id: project_name_upper
        run: |
          echo "PROJECT_NAME_UPPER=$(echo '${{ vars.PROJECT_NAME }}' | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

      - name: GitHub Î¶¥Î¶¨Ïä§ ÏÉùÏÑ±
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: ${{ env.PROJECT_NAME_UPPER }} ${{ env.NEW_TAG }}
          body: |
            üîñ PR Î≤àÌò∏: #${{ github.event.pull_request.number }}
            üîß ÏûëÏÑ±Ïûê: @${{ github.event.pull_request.user.login }}
            üìù Î≥ÄÍ≤ΩÏÇ¨Ìï≠: ${{ github.event.pull_request.title }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-image-and-push:
    name: ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ ÎπåÎìúÏôÄ Ìë∏Ïãú
    needs: bump-version-and-release
    runs-on: ubuntu-latest
    outputs:
      DOCKER_IMAGE_NAME: ${{ steps.set-vars.outputs.docker_image_name }}
      OWNER_LC: ${{ steps.set-vars.outputs.owner_lc }}

    steps:
      - uses: actions/checkout@v4

      - name: Î≥ÄÏàò ÏÑ§Ï†ï
        id: set-vars
        run: |
          echo "DOCKER_IMAGE_NAME=${{ vars.PROJECT_NAME }}-app" >> $GITHUB_ENV
          echo "OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "::set-output name=docker_image_name::${{ vars.PROJECT_NAME }}-app"
          echo "::set-output name=owner_lc::$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')"

      - name: .env ÌååÏùº ÏÉùÏÑ±
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Docker Buildx ÏÑ§Ïπò
        uses: docker/setup-buildx-action@v3

      - name: GHCR Î°úÍ∑∏Ïù∏
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ÎπåÎìú Î∞è Ìë∏Ïãú
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache,mode=max
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.bump-version-and-release.outputs.tag_name }}
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    name: Î∞∞Ìè¨
    runs-on: ubuntu-latest
    needs: build-image-and-push
    permissions:
      id-token: write
      contents: read
    env:
      DOCKER_IMAGE_NAME: ${{ needs.build-image-and-push.outputs.DOCKER_IMAGE_NAME }}
      OWNER_LC: ${{ needs.build-image-and-push.outputs.OWNER_LC }}

    steps:
      - name: AWS Î°úÍ∑∏Ïù∏ (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ROLE_NAME }}
          aws-region: ap-northeast-2

      - name: EC2 Ïù∏Ïä§ÌÑ¥Ïä§ ID Í∞ÄÏ†∏Ïò§Í∏∞
        id: get_instance_ids
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Role,Values=app-server" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          echo "INSTANCE_IDS=$INSTANCE_IDS"
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

      - name: SSM Î™ÖÎ†πÏúºÎ°ú Î∏îÎ£®-Í∑∏Î¶∞ Î∞∞Ìè¨ Ïã§Ìñâ
        run: |
          for ID in $INSTANCE_IDS; do
            aws ssm send-command \
              --instance-ids "$ID" \
              --document-name "AWS-RunShellScript" \
              --comment "Blue-Green Deploy with health check" \
              --region ap-northeast-2 \
              --parameters commands='[
                "set -e",
                "CURRENT_PORT=$(docker ps --filter \"name=app1\" --format '\''{{.Ports}}'\'')",
                "if [ \"$CURRENT_PORT\" = \"8080\" ]; then NEXT_PORT=8081; else NEXT_PORT=8080; fi",
                "CURRENT_APP=app$( [ \"$CURRENT_PORT\" = \"8080\" ] && echo 1 || echo 2 )",
                "NEXT_APP=app$( [ \"$NEXT_PORT\" = \"8080\" ] && echo 1 || echo 2 )",
                "echo '${{ secrets.GHCR_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin",
                "docker pull ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest",
                "docker run -d --network common --name $NEXT_APP -p $NEXT_PORT:8080 ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest",
                "for i in $(seq 1 10); do",
                "  sleep 1",
                "  STATUS=$(curl -sf http://localhost:$NEXT_PORT/actuator/health | grep -o 'UP' || true)",
                "  if [ \"$STATUS\" = \"UP\" ]; then echo \"‚úÖ Health check success\"; break; fi",
                "  if [ $i -eq 10 ]; then echo \"‚ùå Health check failed\"; docker stop $NEXT_APP && docker rm $NEXT_APP; exit 1; fi",
                "done",
                "docker stop $CURRENT_APP || true",
                "docker rm $CURRENT_APP || true",
                "docker rmi $(docker images -f 'dangling=true' -q) || true"
              ]'
          done
