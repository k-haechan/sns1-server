plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.mysite'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Flyway (DB Migration)
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // SMTP Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // Database Drivers
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Sql Logging
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.11.0'

    // SpringDoc OpenAPI Starter WebMVC UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'


}

tasks.named('test') {
    useJUnitPlatform()
}


jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                'com/mysite/sns1_server/Sns1ServerApplication.class',
                'com/mysite/sns1_server/domain/**/entity/**',
                'com/mysite/sns1_server/domain/**/dto/**',
                'com/mysite/sns1_server/domain/**/type/**',
                'com/mysite/sns1_server/global/**'
        ])
    }))
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                'com/mysite/sns1_server/Sns1ServerApplication.class',
                'com/mysite/sns1_server/domain/**/entity/**',
                'com/mysite/sns1_server/domain/**/dto/**',
                'com/mysite/sns1_server/domain/**/type/**',
                'com/mysite/sns1_server/global/**'
        ])
    }))
}

tasks.named('build') {
    dependsOn jacocoTestCoverageVerification
}
