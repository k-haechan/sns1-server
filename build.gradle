plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.mysite'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Flyway (DB Migration)
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // SMTP Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // Database Drivers
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Sql Logging
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.11.0'

    // SpringDoc OpenAPI Starter WebMVC UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'


}

tasks.named('test') {
    useJUnitPlatform()
}

build {
    dependsOn jacocoTestCoverageVerification
}


jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/mysite/sns1_server/Sns1ServerApplication.class', // <-- 여기에 메인 애플리케이션 클래스 경로를 추가
                    // 예시: 'com/example/demo/DemoApplication.class'
                    // 만약 특정 패키지 전체를 제외하고 싶다면: 'com/example/demo/config/**'
                    'com/mysite/sns1_server/domain/**/entity/**',
                    'com/mysite/sns1_server/domain/**/dto/**',
                    'com/mysite/sns1_server/domain/**/type/**',
                    'com/mysite/sns1_server/global/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'BUNDLE' // BUNDLE은 전체 애플리케이션을 의미

            afterEvaluate {
                classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            'com/mysite/sns1_server/Sns1ServerApplication.class', // <-- 여기에 메인 애플리케이션 클래스 경로를 추가
                            // 예시: 'com/example/demo/DemoApplication.class'
                            // 만약 특정 패키지 전체를 제외하고 싶다면: 'com/example/demo/config/**'
                            'com/mysite/sns1_server/domain/**/entity/**',
                            'com/mysite/sns1_server/domain/**/dto/**',
                            'com/mysite/sns1_server/domain/**/type/**',
                            'com/mysite/sns1_server/global/**'
                    ])
                }))
            }

            limit {
                counter = 'LINE' // 라인 커버리지 기준
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}
